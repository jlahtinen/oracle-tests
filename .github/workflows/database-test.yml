name: database test

on:
  workflow_dispatch:

jobs:
  setup-db:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        tag: ["23.2.0.0", "23.3.0.0", "23.4.0.0", "23.5.0.0", "23.6.0.0"]
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      
      - name: Pull Oracle Database Image
        run: |
          docker pull container-registry.oracle.com/database/free:${{ matrix.tag }}
      
      - name: database test
        run: |
          docker run -d --name oracle-db-${{ matrix.tag }} \
            -e ORACLE_PWD=Oracle123 \
            -p 1521:1521 \
            container-registry.oracle.com/database/free:${{ matrix.tag }}
      
      - name: Wait for Database to Start
        run: |
          echo "Waiting for DB to be ready..."
          ORACLE_HEALTHCHECK_CMD="docker exec oracle-db-${{ matrix.tag }} bash -c '/opt/oracle/checkDBStatus.sh'"
          until docker exec oracle-db-${{ matrix.tag }} bash -c '/opt/oracle/checkDBStatus.sh'; do
            sleep 10
          done
      
      - name: Execute SQL Commands
        run: |
          cat <<EOF > setup.sql
          CREATE TABLE test_table (
            id NUMBER PRIMARY KEY,
            name VARCHAR2(100) NOT NULL
          );
          CREATE UNIQUE INDEX test_table_name_idx ON test_table(name);
          ALTER TABLE test_table ADD CONSTRAINT name_unique UNIQUE(name);
          EXIT;
          EOF
          docker cp setup.sql oracle-db-${{ matrix.tag }}:/setup.sql
          docker exec oracle-db-${{ matrix.tag }} bash -c \
            "echo 'exit' | sqlplus sys/Oracle123@//localhost:1521/FREEPDB1 as sysdba @/setup.sql"
      
      - name: Stop and Remove Container
        run: |
          docker stop oracle-db-${{ matrix.tag }}
          docker rm oracle-db-${{ matrix.tag }}
